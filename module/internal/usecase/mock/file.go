// Code generated by MockGen. DO NOT EDIT.
// Source: file.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	util "video-server/internal/util"
	entity "video-server/module/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockFileUsecase is a mock of FileUsecase interface.
type MockFileUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockFileUsecaseMockRecorder
}

// MockFileUsecaseMockRecorder is the mock recorder for MockFileUsecase.
type MockFileUsecaseMockRecorder struct {
	mock *MockFileUsecase
}

// NewMockFileUsecase creates a new mock instance.
func NewMockFileUsecase(ctrl *gomock.Controller) *MockFileUsecase {
	mock := &MockFileUsecase{ctrl: ctrl}
	mock.recorder = &MockFileUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileUsecase) EXPECT() *MockFileUsecaseMockRecorder {
	return m.recorder
}

// CreateFile mocks base method.
func (m *MockFileUsecase) CreateFile(ctx context.Context, filereader util.FileReader) (*entity.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFile", ctx, filereader)
	ret0, _ := ret[0].(*entity.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFile indicates an expected call of CreateFile.
func (mr *MockFileUsecaseMockRecorder) CreateFile(ctx, filereader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFile", reflect.TypeOf((*MockFileUsecase)(nil).CreateFile), ctx, filereader)
}

// DeleteFile mocks base method.
func (m *MockFileUsecase) DeleteFile(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockFileUsecaseMockRecorder) DeleteFile(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockFileUsecase)(nil).DeleteFile), ctx, id)
}

// GetFile mocks base method.
func (m *MockFileUsecase) GetFile(ctx context.Context, id int) (*entity.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFile", ctx, id)
	ret0, _ := ret[0].(*entity.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFile indicates an expected call of GetFile.
func (mr *MockFileUsecaseMockRecorder) GetFile(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFile", reflect.TypeOf((*MockFileUsecase)(nil).GetFile), ctx, id)
}

// ListFiles mocks base method.
func (m *MockFileUsecase) ListFiles(ctx context.Context) ([]*entity.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFiles", ctx)
	ret0, _ := ret[0].([]*entity.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFiles indicates an expected call of ListFiles.
func (mr *MockFileUsecaseMockRecorder) ListFiles(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFiles", reflect.TypeOf((*MockFileUsecase)(nil).ListFiles), ctx)
}
